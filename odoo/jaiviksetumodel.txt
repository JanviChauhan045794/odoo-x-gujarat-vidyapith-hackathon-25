from django.db import models
from django.contrib.auth.models import AbstractUser

# User Model (Common for All Users)
class User(AbstractUser):
    ROLE_CHOICES = [
        ('Admin', 'Admin'),
        ('Farmer', 'Farmer'),
        ('Customer', 'Customer'),
        ('Verifier', 'Verifier'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    phone = models.CharField(max_length=20, blank=True, null=True)
    location = models.CharField(max_length=255, blank=True, null=True)

# Farmer Profile Model
class FarmerProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    farm_location = models.CharField(max_length=255, blank=True, null=True)
    farm_size = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    farm_type = models.CharField(max_length=100, blank=True, null=True)
    certification_status = models.CharField(max_length=20, choices=[('Approved', 'Approved'), ('Pending', 'Pending'), ('Rejected', 'Rejected')], default='Pending')
    profile_picture = models.ImageField(upload_to='farmers/', blank=True, null=True)

# Certificate Request Model
class CertificateRequest(models.Model):
    farmer = models.ForeignKey(FarmerProfile, on_delete=models.CASCADE)
    documents = models.FileField(upload_to='certificates/')
    status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Under Review', 'Under Review'), ('Approved', 'Approved')], default='Pending')
    submitted_on = models.DateTimeField(auto_now_add=True)

# Product Model
class Product(models.Model):
    farmer = models.ForeignKey(FarmerProfile, on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    category = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    stock = models.IntegerField()
    certification_status = models.CharField(max_length=20, choices=[('Certified', 'Certified'), ('Not Certified', 'Not Certified')])
    created_at = models.DateTimeField(auto_now_add=True)

# Order Model
class Order(models.Model):
    STATUS_CHOICES = [
        ('Pending', 'Pending'),
        ('Processing', 'Processing'),
        ('Delivered', 'Delivered'),
        ('Returned', 'Returned'),
    ]
    farmer = models.ForeignKey(FarmerProfile, on_delete=models.CASCADE)
    customer = models.ForeignKey(User, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')
    total_price = models.DecimalField(max_digits=10, decimal_places=2)
    order_date = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# Sales Report Model
class SalesReport(models.Model):
    farmer = models.ForeignKey(FarmerProfile, on_delete=models.CASCADE)
    total_sales = models.DecimalField(max_digits=10, decimal_places=2)
    total_orders = models.IntegerField()
    report_date = models.DateTimeField(auto_now_add=True)

# Customer Profile Model
class CustomerProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    shipping_address = models.TextField()
    order_preferences = models.JSONField(blank=True, null=True)

# Wishlist Model
class Wishlist(models.Model):
    customer = models.ForeignKey(CustomerProfile, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)

# Cart Model
class Cart(models.Model):
    customer = models.ForeignKey(CustomerProfile, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField()

# Order Tracking Model
class OrderTracking(models.Model):
    STATUS_CHOICES = [
        ('Ordered', 'Ordered'),
        ('Packed', 'Packed'),
        ('Shipped', 'Shipped'),
        ('Delivered', 'Delivered'),
    ]
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES)
    updated_on = models.DateTimeField(auto_now_add=True)

# Admin Profile Model
class AdminProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    dashboard_access_level = models.CharField(max_length=50)

# Product Approval Model
class ProductApproval(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Under Review', 'Under Review')], default='Under Review')
    comments = models.TextField(blank=True, null=True)

# Certification Review Model
class CertificationReview(models.Model):
    certificate_request = models.ForeignKey(CertificateRequest, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Pending', 'Pending')], default='Pending')

# FAQ Model
class FAQ(models.Model):
    question = models.TextField()
    answer = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

# Blog Model
class Blog(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# Verifier Profile Model
class VerifierProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)

# Inspection Request Model
class InspectionRequest(models.Model):
    verifier = models.ForeignKey(VerifierProfile, on_delete=models.CASCADE)
    farmer = models.ForeignKey(FarmerProfile, on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=[('Scheduled', 'Scheduled'), ('Completed', 'Completed'), ('Pending', 'Pending')], default='Pending')
    date_assigned = models.DateTimeField(auto_now_add=True)

# Inspection Report Model
class InspectionReport(models.Model):
    inspection = models.ForeignKey(InspectionRequest, on_delete=models.CASCADE)
    verification_status = models.CharField(max_length=20, choices=[('Approved', 'Approved'), ('Denied', 'Denied'), ('Partial Compliance', 'Partial Compliance')])
    feedback = models.TextField(blank=True, null=True)
